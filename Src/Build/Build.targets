<?xml version="1.0" encoding="utf-8"?>

<Project ToolsVersion="4.0" DefaultTargets="All" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <GenDir>$(MSBuildThisFileDirectory)..\..\Gen</GenDir>
        <LibDir>$(MSBuildThisFileDirectory)..\..\Lib</LibDir>
        <DocDir>$(MSBuildThisFileDirectory)..\..\Doc</DocDir>
        <SrcDir>$(MSBuildThisFileDirectory)..\</SrcDir>
        <MSBuildCommunityTasksPath>.</MSBuildCommunityTasksPath>
        <Configuration Condition=" $(Configuration) == '' ">Release</Configuration>
    </PropertyGroup>

    <Import Project="$(LibDir)\MSBuild Community Tasks\MSBuild.Community.Tasks.Targets" />
    <UsingTask AssemblyFile="$(LibDir)\xUnit\xunit.runner.msbuild.dll" TaskName="Xunit.Runner.MSBuild.xunit" />

    <Target Name="All" DependsOnTargets="Clean;Build;Test;GenerateDocumentation;CreateArchives;CreateNuGetPackages"/>

    <Target Name="Clean">
        <MSBuild Projects="$(SrcDir)\HelperTrinity.sln" Properties="Configuration=SL40 $(Configuration)" Targets="Clean" BuildInParallel="True"/>
        <MSBuild Projects="$(SrcDir)\HelperTrinity.sln" Properties="Configuration=FX35 $(Configuration)" Targets="Clean" BuildInParallel="True"/>
        <MSBuild Projects="$(SrcDir)\HelperTrinity.sln" Properties="Configuration=FX40 $(Configuration)" Targets="Clean" BuildInParallel="True"/>

        <RemoveDir Directories="$(GenDir)" />
    </Target>

    <Target Name="Build">
        <!--
        order is very important here, for reasons I haven't investigated fully. If the Silverlight solution is built second, it is not
        a valid Silverlight binary. It seems that building the standard solution results in some properties being set that then affect
        the Silverlight build.
        -->
        <MSBuild Projects="$(SrcDir)\HelperTrinity.sln" Properties="Configuration=SL40 $(Configuration)" Targets="Build" BuildInParallel="True"/>
        <MSBuild Projects="$(SrcDir)\HelperTrinity.sln" Properties="Configuration=FX35 $(Configuration)" Targets="Build" BuildInParallel="True"/>
        <MSBuild Projects="$(SrcDir)\HelperTrinity.sln" Properties="Configuration=FX40 $(Configuration)" Targets="Build" BuildInParallel="True"/>
    </Target>

    <Target Name="Test">
        <MakeDir Directories="$(GenDir)\Tests" />
        <xunit Assembly="$(SrcDir)\UnitTest\bin\FX40 $(Configuration)\Kent.Boogaart.HelperTrinity.UnitTest.dll" Xml="$(GenDir)\Tests\Kent.Boogaart.HelperTrinity.UnitTest.xml" />
    </Target>

    <Target Name="GenerateDocumentation">
        <MakeDir Directories="$(GenDir)\Documentation" />

        <!--
        Build documentation. This relies on the following components being installed:
         - Latest Sandcastle (http://sandcastle.codeplex.com/)
         - Latest Sandcastle Help File Builder (http://shfb.codeplex.com/)
         - Any relevant updates to styles from Sandcastle Styles (http://sandcastlestyles.codeplex.com/)
        -->
        <MSBuild Projects="$(DocDir)\HelperTrinity.shfbproj"/>
        <OnError ExecuteTargets="GenerateDocumentationFailed"/>
    </Target>

    <Target Name="GenerateDocumentationFailed">
        <Error Text="Building documentation failed. Please ensure you have the following components installed: Latest Sandcastle (http://sandcastle.codeplex.com/), latest Sandcastle Help File Builder (http://shfb.codeplex.com/), any relevant updates to styles from Sandcastle Styles (http://sandcastlestyles.codeplex.com/). You may also need to log out and back in."/>
    </Target>

    <Target Name="CreateArchives">
        <GetAssemblyIdentity AssemblyFiles="$(SrcDir)\HelperTrinity\bin\FX40 $(Configuration)\Kent.Boogaart.HelperTrinity.dll">
            <Output TaskParameter="Assemblies" ItemName="AssemblyIdentity" />
        </GetAssemblyIdentity>
        <CreateProperty Condition="$(Version) == ''" Value="@(AssemblyIdentity -> '%(Version)')">
            <Output TaskParameter="Value" PropertyName="Version" />
        </CreateProperty>

        <MakeDir Directories="$(GenDir)" Condition="!Exists('$(GenDir)')" />
        <RemoveDir Directories="$(GenDir)\Temp" />
        <MakeDir Directories="$(GenDir)\Temp" Condition="!Exists('$(GenDir)\Temp')" />

        <!-- zip source -->
        <CreateItem Include="..\..\**\*.*" Exclude="..\..\**\*.suo;..\..\**\*.csproj.user;..\..\**\*.gpState;..\..\**\bin\**;..\..\**\obj\**;..\..\**\.svn\**;..\..\Gen\**">
            <Output ItemName="Source" TaskParameter="Include" />
        </CreateItem>
        <Zip ZipFileName="$(GenDir)\TheHelperTrinity-$(Version)-src.zip" WorkingDirectory="..\..\" ZipLevel="9" Files="@(Source)" />

        <!-- zip documentation -->
        <CreateItem Include="$(GenDir)\Documentation\The Helper Trinity.chm">
            <Output ItemName="DocFiles" TaskParameter="Include" />
        </CreateItem>
        <Zip ZipFileName="$(GenDir)\TheHelperTrinity-$(Version)-doc.zip" WorkingDirectory="$(GenDir)\Documentation\" ZipLevel="9" Files="@(DocFiles)" />

        <!-- zip binaries -->
        <CreateItem Include="$(SrcDir)\HelperTrinity\bin\FX35 $(Configuration)\*.*">
            <Output ItemName="FX35Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(FX35Files)" DestinationFolder="$(GenDir)\Temp\FX35" />
        <CreateItem Include="$(GenDir)\Temp\FX35\*.*">
            <Output ItemName="FX35Binaries" TaskParameter="Include" />
        </CreateItem>
        <Zip ZipFileName="$(GenDir)\TheHelperTrinity-$(Version)-FX35-bin.zip" WorkingDirectory="$(GenDir)\Temp\FX35\" ZipLevel="9" Files="@(FX35Binaries)" />

        <CreateItem Include="$(SrcDir)\HelperTrinity\bin\FX40 $(Configuration)\*.*">
            <Output ItemName="FX40Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(FX40Files)" DestinationFolder="$(GenDir)\Temp\FX40" />
        <CreateItem Include="$(GenDir)\Temp\FX40\*.*">
            <Output ItemName="FX40Binaries" TaskParameter="Include" />
        </CreateItem>
        <Zip ZipFileName="$(GenDir)\TheHelperTrinity-$(Version)-FX40-bin.zip" WorkingDirectory="$(GenDir)\Temp\FX40\" ZipLevel="9" Files="@(FX40Binaries)" />

        <CreateItem Include="$(SrcDir)\HelperTrinity\bin\SL40 $(Configuration)\*.*" Exclude="$(SrcDir)\HelperTrinity\bin\SL40 $(Configuration)\Coverage.log">
            <Output ItemName="SL40Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(SL40Files)" DestinationFolder="$(GenDir)\Temp\SL40" />
        <CreateItem Include="$(GenDir)\Temp\SL40\*.*">
            <Output ItemName="SL40Binaries" TaskParameter="Include" />
        </CreateItem>
        <Zip ZipFileName="$(GenDir)\TheHelperTrinity-$(Version)-SL40-bin.zip" WorkingDirectory="$(GenDir)\Temp\SL40\" ZipLevel="9" Files="@(SL40Binaries)" />
    </Target>
    
    <Target Name="CreateNuGetPackages">
        <MakeDir Directories="$(GenDir)\NuGet"/>
        <MakeDir Directories="$(GenDir)\NuGet\Library"/>
        <MakeDir Directories="$(GenDir)\NuGet\Symbols"/>

        <GetAssemblyIdentity AssemblyFiles="$(SrcDir)\HelperTrinity\bin\FX40 $(Configuration)\Kent.Boogaart.HelperTrinity.dll">
            <Output TaskParameter="Assemblies" ItemName="AssemblyIdentity" />
        </GetAssemblyIdentity>
        <CreateProperty Condition="$(Version) == ''" Value="@(AssemblyIdentity -> '%(Version)')">
            <Output TaskParameter="Value" PropertyName="Version" />
        </CreateProperty>

        <ItemGroup>
            <Tokens Include="Version">
                <ReplacementValue>$(Version)</ReplacementValue>
            </Tokens>
        </ItemGroup>

        <!-- generate nuspec files from the templates -->
        <TemplateFile Template="$(SrcDir)\HelperTrinity.nuspec.library.template" OutputFileName="$(GenDir)\NuGet\Library\Kent.Boogaart.HelperTrinity $(Version).nuspec" Tokens="@(Tokens)"/>
        <TemplateFile Template="$(SrcDir)\HelperTrinity.nuspec.symbols.template" OutputFileName="$(GenDir)\NuGet\Symbols\Kent.Boogaart.HelperTrinity $(Version).symbols.nuspec" Tokens="@(Tokens)"/>

        <!-- copy files into the appropriate locations -->
        <CreateItem Include="$(SrcDir)\HelperTrinity\bin\FX35 $(Configuration)\*.*" Exclude="$(SrcDir)\HelperTrinity\bin\FX35 $(Configuration)\*.pdb">
            <Output ItemName="FX35_Library_Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(FX35_Library_Files)" DestinationFolder="$(GenDir)\NuGet\Library\lib\net35" />
        <CreateItem Include="$(SrcDir)\HelperTrinity\bin\FX40 $(Configuration)\*.*" Exclude="$(SrcDir)\HelperTrinity\bin\FX40 $(Configuration)\*.pdb">
            <Output ItemName="FX40_Library_Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(FX40_Library_Files)" DestinationFolder="$(GenDir)\NuGet\Library\lib\net40" />
        <CreateItem Include="$(SrcDir)\HelperTrinity\bin\SL40 $(Configuration)\*.*" Exclude="$(SrcDir)\HelperTrinity\bin\SL40 $(Configuration)\*.pdb">
            <Output ItemName="SL40_Library_Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(SL40_Library_Files)" DestinationFolder="$(GenDir)\NuGet\Library\lib\sl40" />
        <CreateItem Include="$(SrcDir)\HelperTrinity\bin\FX35 $(Configuration)\*.*">
            <Output ItemName="FX35_Symbols_Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(FX35_Symbols_Files)" DestinationFolder="$(GenDir)\NuGet\Symbols\lib\net35" />
        <CreateItem Include="$(SrcDir)\HelperTrinity\bin\FX40 $(Configuration)\*.*">
            <Output ItemName="FX40_Symbols_Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(FX40_Symbols_Files)" DestinationFolder="$(GenDir)\NuGet\Symbols\lib\net40" />
        <CreateItem Include="$(SrcDir)\HelperTrinity\bin\SL40 $(Configuration)\*.*">
            <Output ItemName="SL40_Symbols_Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(SL40_Symbols_Files)" DestinationFolder="$(GenDir)\NuGet\Symbols\lib\sl40" />
        <CreateItem Include="$(SrcDir)\**\*.*" Exclude="$(SrcDir)\**\*.suo;$(SrcDir)\**\*.csproj.user;$(SrcDir)\**\*.gpState;$(SrcDir)\**\bin\**;$(SrcDir)\**\obj\**;$(SrcDir)\**\.svn\**">
            <Output ItemName="Source_Symbols_Files" TaskParameter="Include" />
        </CreateItem>
        <Copy SourceFiles="@(Source_Symbols_Files)" DestinationFolder="$(GenDir)\NuGet\Symbols\src\%(RecursiveDir)"/>

        <!-- pack the nugets -->
        <Exec Command='"$(LibDir)\NuGet\NuGet.exe" pack "$(GenDir)\NuGet\Library\Kent.Boogaart.HelperTrinity $(Version).nuspec"' WorkingDirectory="$(GenDir)\NuGet"/>
        <Exec Command='"$(LibDir)\NuGet\NuGet.exe" pack -symbols "$(GenDir)\NuGet\Symbols\Kent.Boogaart.HelperTrinity $(Version).symbols.nuspec"' WorkingDirectory="$(GenDir)\NuGet"/>

        <Message Text="NuGet packages created but not published. Type 'msbuild Build.targets /t:PublishNuGetPackages' to publish." Importance="High"/>
    </Target>

    <!--
    this target does not execute automatically - it must be done explicitly
    -->
    <Target Name="PublishNuGetPackages">
        <GetAssemblyIdentity AssemblyFiles="$(SrcDir)\HelperTrinity\bin\FX40 $(Configuration)\Kent.Boogaart.HelperTrinity.dll">
            <Output TaskParameter="Assemblies" ItemName="AssemblyIdentity" />
        </GetAssemblyIdentity>
        <CreateProperty Condition="$(Version) == ''" Value="@(AssemblyIdentity -> '%(Version)')">
            <Output TaskParameter="Value" PropertyName="Version" />
        </CreateProperty>
        
        <Exec Command='"$(LibDir)\NuGet\NuGet.exe" push "$(GenDir)\NuGet\Kent.Boogaart.HelperTrinity.$(Version).nupkg"'/>
        <Exec Command='"$(LibDir)\NuGet\NuGet.exe" push "$(GenDir)\NuGet\Kent.Boogaart.HelperTrinity.symbols.$(Version).nupkg"'/>
    </Target>
</Project>